{"version":3,"sources":["component/scene.js","component/venueManager.png","component/sceneWrapper/SceneWrapper.js","action.js","component/map/Map.js","component/navbar/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["props","reactCanvas","useRef","antialias","engineOptions","adaptToDeviceRatio","sceneOptions","onRender","onSceneReady","rest","useEffect","current","engine","Engine","scene","Scene","isReady","captureMap","onClickRightDialogue","setSuggestion","setText","onReadyObservable","addOnce","runRenderLoop","render","resize","getEngine","window","addEventListener","dispose","removeEventListener","ref","img","camera","ArcRotateCamera","Math","PI","Vector3","Zero","canvas","getRenderingCanvas","clearColor","Color3","box","MeshBuilder","CreateBox","height","width","depth","onPointerObservable","add","pointerInfo","type","PointerEventTypes","POINTERDOWN","POINTERDOUBLETAP","createInput","attachControl","HemisphericLight","intensity","info","advancedTexture","AdvancedDynamicTexture","CreateForMesh","console","log","input1","InputText","color","background","fontSize","top","left","onTextChangedObservable","text","length","show","addControl","linkWithMesh","materialImg","StandardMaterial","diffuseTexture","Texture","clone","material","setNoOfBoxes","getNumOfBoxes","setCaptureMap","id","instance","axios","create","baseURL","getUser","body","get","username","password","then","res","catch","err","error","editPhotos","name","post","Map","state","marker_lat","marker_lng","onMarkerDragEnd","e","new_lat","latLng","lat","new_lng","lng","setState","captureMapOnClick","html2canvas","document","querySelector","logging","letterRendering","allowTaint","useCORS","toDataURL","saveImage","loggedInUser","data","setImageUpdated","imageUpdated","MapWithAMarker","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","draggable","onDragEnd","position","googleMapURL","loadingElement","style","containerElement","minWidth","borderRadius","mapElement","className","onClick","Component","NavBar","location","reload","App","useState","userName","setUserName","loginScreen","image","setImage","venueManager","noOfBoxes","suggestion","rightDialogueValue","setRightDialogueValue","rightDialogueRef","arrayOfWord","handleClickOutside","contains","target","result","filtered","filter","a","includes","border","src","alt","display","flexDirection","padding","overflow","map","words","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bb85eaf1.chunk.js","sourcesContent":["import { Engine, Scene } from \"@babylonjs/core\";\r\nimport React, { useEffect, useRef } from \"react\";\r\n\r\nexport default (props) => {\r\n  const reactCanvas = useRef(null);\r\n  const {\r\n    antialias,\r\n    engineOptions,\r\n    adaptToDeviceRatio,\r\n    sceneOptions,\r\n    onRender,\r\n    onSceneReady,\r\n    ...rest\r\n  } = props;\r\n\r\n  useEffect(() => {\r\n    if (reactCanvas.current) {\r\n      const engine = new Engine(\r\n        reactCanvas.current,\r\n        antialias,\r\n        engineOptions,\r\n        adaptToDeviceRatio\r\n      );\r\n      const scene = new Scene(engine, sceneOptions);\r\n\r\n      if (scene.isReady()) {\r\n        onSceneReady(\r\n          scene,\r\n          props.captureMap,\r\n          props.onClickRightDialogue,\r\n          props.setSuggestion,\r\n          props.setText\r\n        );\r\n      } else {\r\n        scene.onReadyObservable.addOnce((scene) =>\r\n          onSceneReady(\r\n            scene,\r\n            props.captureMap,\r\n            props.onClickRightDialogue,\r\n            props.setSuggestion,\r\n            props.setText\r\n          )\r\n        );\r\n      }\r\n\r\n      engine.runRenderLoop(() => {\r\n        if (typeof onRender === \"function\") {\r\n          onRender(scene);\r\n        }\r\n        scene.render();\r\n      });\r\n\r\n      const resize = () => {\r\n        scene.getEngine().resize();\r\n      };\r\n\r\n      if (window) {\r\n        window.addEventListener(\"resize\", resize);\r\n      }\r\n\r\n      return () => {\r\n        scene.getEngine().dispose();\r\n\r\n        if (window) {\r\n          window.removeEventListener(\"resize\", resize);\r\n        }\r\n      };\r\n    }\r\n  }, [reactCanvas, props.captureMap]);\r\n\r\n  return <canvas ref={reactCanvas} {...rest} />;\r\n};\r\n","export default __webpack_public_path__ + \"static/media/venueManager.9d5088c3.png\";","import React, { useEffect } from \"react\";\r\nimport \"pepjs\";\r\nimport {\r\n  FreeCamera,\r\n  Vector3,\r\n  HemisphericLight,\r\n  MeshBuilder,\r\n  ArcRotateCamera,\r\n  StandardMaterial,\r\n  Texture,\r\n  PointLight,\r\n  DirectionalLight,\r\n  Color3,\r\n  PointerEventTypes,\r\n  Mesh,\r\n} from \"@babylonjs/core\";\r\nimport SceneComponent from \"../scene\";\r\nimport venueManager from \"../venueManager.png\";\r\nimport \"./SceneWrapper.css\";\r\nimport { AdvancedDynamicTexture, InputText, TextBlock } from \"babylonjs-gui\";\r\n\r\nlet box;\r\n\r\nconst onSceneReady = (\r\n  scene,\r\n  img,\r\n  onClickRightDialogue,\r\n  setSuggestion,\r\n  setText\r\n) => {\r\n  // This creates and positions a free camera (non-mesh)\r\n  var camera = new ArcRotateCamera(\r\n    \"camera1\",\r\n    -(Math.PI / 2),\r\n    Math.PI / 2,\r\n    4,\r\n    new Vector3.Zero(1, 1, 0),\r\n    scene\r\n  );\r\n  let left = 40;\r\n  let top = 45;\r\n  const canvas = scene.getEngine().getRenderingCanvas();\r\n  scene.clearColor = new Color3(0.8, 0.8, 0.8);\r\n\r\n  const box = new MeshBuilder.CreateBox(\"box\", {\r\n    height: 1,\r\n    width: 1,\r\n    depth: 0.25,\r\n  });\r\n  scene.onPointerObservable.add((pointerInfo) => {\r\n    switch (pointerInfo.type) {\r\n      case PointerEventTypes.POINTERDOWN:\r\n        onClickRightDialogue(\"\");\r\n        break;\r\n      case PointerEventTypes.POINTERDOUBLETAP:\r\n        createInput(pointerInfo);\r\n        break;\r\n    }\r\n  });\r\n\r\n  camera.attachControl(canvas, true);\r\n\r\n  var light = new HemisphericLight(\"light\", new Vector3(1, -1, -2), scene);\r\n  light.intensity = 1;\r\n\r\n  const createInput = (info) => {\r\n    let advancedTexture = new AdvancedDynamicTexture.CreateForMesh(box);\r\n    console.log(info);\r\n    let input1 = new InputText();\r\n    input1.width = \"400px\";\r\n    input1.height = \"100px\";\r\n    input1.color = \"white\";\r\n    input1.background = \"grey\";\r\n    input1.fontSize = \"80px\";\r\n    input1.top = `${top}%`;\r\n    input1.left = `${left}%`;\r\n    input1.onTextChangedObservable.add(() => {\r\n      if (input1.text.length > 0) {\r\n        setText(input1.text);\r\n        setSuggestion({\r\n          show: true,\r\n          top: \"50vh\",\r\n          left: \"50vw\",\r\n        });\r\n      }else {\r\n        setText(\"\")\r\n        setSuggestion({\r\n          show:false\r\n        })\r\n      }\r\n      // createBox();\r\n    });\r\n    console.log(input1);\r\n\r\n    advancedTexture.addControl(input1);\r\n    input1.linkWithMesh(box);\r\n  };\r\n\r\n  const createBox = () => {\r\n    let outerBox = box.clone(\"outerBox\");\r\n    outerBox.material = materialImg;\r\n    let advancedTexture = new AdvancedDynamicTexture.CreateForMesh(outerBox);\r\n\r\n    let input1 = new TextBlock();\r\n    input1.width = \"400px\";\r\n    input1.height = \"400px\";\r\n    input1.color = \"white\";\r\n    input1.background = \"grey\";\r\n    input1.fontSize = \"80px\";\r\n    input1.top = `${top}%`;\r\n    input1.left = `${left}%`;\r\n\r\n    console.log(input1);\r\n\r\n    advancedTexture.addControl(input1);\r\n    input1.linkWithMesh(outerBox);\r\n  };\r\n\r\n  // add image\r\n  const materialImg = new StandardMaterial(\"materialImg\", scene);\r\n  materialImg.diffuseTexture = new Texture(img, scene);\r\n\r\n  let innerBox = box.clone(\"innerBox\");\r\n  innerBox.material = materialImg;\r\n};\r\n\r\nconst onRender = (scene) => {\r\n  if (box !== undefined) {\r\n    var deltaTimeInMillis = scene.getEngine().getDeltaTime();\r\n\r\n    const rpm = 5;\r\n    box.rotation.y += (rpm / 60) * Math.PI * 2 * (deltaTimeInMillis / 1000);\r\n  }\r\n};\r\n\r\nexport default (props) => {\r\n  const getNumOfBoxes = (props) => {\r\n    props.setNoOfBoxes(8);\r\n  };\r\n  useEffect(() => {\r\n    getNumOfBoxes(props);\r\n  }, []);\r\n\r\n  return (\r\n    <SceneComponent\r\n      antialias\r\n      onSceneReady={onSceneReady}\r\n      setCaptureMap={props.setCaptureMap}\r\n      captureMap={props.captureMap}\r\n      onClickRightDialogue={props.onClickRightDialogue}\r\n      setText={props.setText}\r\n      onRender={onRender}\r\n      setSuggestion={props.setSuggestion}\r\n      id=\"my-canvas\"\r\n    />\r\n  );\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n  baseURL: \"https://google-map-img-be.herokuapp.com/\",\r\n});\r\n\r\nexport const createUser = (body) => {\r\n  return instance\r\n    .post(\"/v1/createUser\", body)\r\n    .then((res) => res)\r\n    .catch((err) => console.error(\"create product error\", err));\r\n\r\n  // dispatch({\r\n  //   type: actionTypes.CREATE_PRODUCT,\r\n  //   payload: {\r\n  //     id: data.id,\r\n  //     name: data.name,\r\n  //     actual_price: data.actual_price,\r\n  //     selling_price: data.selling_price,\r\n  //     quantity_in_hand: data.quantity_in_hand,\r\n  //     created_at: data.created_at,\r\n  //   },\r\n  // });\r\n  // localStorage.setItem(\"cart\",JSON.stringify(getState().cart))\r\n};\r\n\r\nexport const getUser = (body) => {\r\n  return instance\r\n    .get(`/v1/getUser?username=${body.username}&&password=${body.password}`)\r\n    .then((res) => {\r\n      console.log(\"product list api\", res);\r\n      return res;\r\n    })\r\n    .catch((err) => console.error(\"create product error\", err));\r\n};\r\nexport const deleteUser = (body) => {\r\n  return instance\r\n    .post(\"/v1/deleteUser\", body)\r\n    .then((res) => {\r\n      console.log(\"product delete api\", res);\r\n      return res;\r\n    })\r\n    .catch((err) => console.error(\"delete product error\", err));\r\n};\r\nexport const editPhotos = (name, body) => {\r\n  return instance\r\n    .post(`/v1/editPhotos?username=${name}`, body)\r\n    .then((res) => {\r\n      console.log(\"on edit click api\", res);\r\n      return res;\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"create product error\", err);\r\n      return err;\r\n    });\r\n};\r\n","import React, { Component } from \"react\";\r\nimport html2canvas from \"html2canvas\";\r\nimport {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n} from \"react-google-maps\";\r\nimport \"./Map.css\";\r\nimport { ThinMaterialHelper, TimerState } from \"@babylonjs/core\";\r\nimport { editPhotos } from \"../../action\";\r\n\r\nexport default class Map extends Component {\r\n  state = {\r\n    marker_lat: 13.0827,\r\n    marker_lng: 80.2376,\r\n    img: \"\",\r\n  };\r\n\r\n  onMarkerDragEnd = (e) => {\r\n    let new_lat = e.latLng.lat();\r\n    let new_lng = e.latLng.lng();\r\n    this.setState({ marker_lat: new_lat, marker_lng: new_lng });\r\n  };\r\n\r\n  captureMapOnClick = () => {\r\n    html2canvas(document.querySelector(\"#map-container\"), {\r\n      logging: true,\r\n      letterRendering: 1,\r\n      allowTaint: false,\r\n      useCORS: true,\r\n    }).then((canvas) => {\r\n      this.props.setCaptureMap(canvas.toDataURL(\"image/webp\"));\r\n    });\r\n  };\r\n\r\n  saveImage = (e) => {\r\n    let name = this.props.loggedInUser.username;\r\n    let body = {\r\n      text: \"edit\",\r\n      img: this.props.captureMap,\r\n    };\r\n    console.log(\"saveimage clicked\");\r\n    editPhotos(name, body).then((res) =>\r\n      this.setState({ img: res.data.res.img }, () =>\r\n        this.props.setImageUpdated(!this.props.imageUpdated)\r\n      )\r\n    );\r\n  };\r\n  render() {\r\n    const MapWithAMarker = withScriptjs(\r\n      withGoogleMap((props) => (\r\n        <GoogleMap\r\n          defaultZoom={8}\r\n          defaultCenter={{\r\n            lat: this.state.marker_lat,\r\n            lng: this.state.marker_lng,\r\n          }}\r\n        >\r\n          <Marker\r\n            draggable={true}\r\n            onDragEnd={this.onMarkerDragEnd}\r\n            position={{\r\n              lat: this.state.marker_lat,\r\n              lng: this.state.marker_lng,\r\n            }}\r\n          />\r\n        </GoogleMap>\r\n      ))\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <div id=\"map-container\">\r\n          <MapWithAMarker\r\n            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAMG_RDX0SnmkWUy7vBSMURe7n15q0q6aA&v=3.exp&libraries=geometry,drawing,places\"\r\n            loadingElement={<div style={{ height: `100%`, width: \"100%\" }} />}\r\n            containerElement={\r\n              <div\r\n                style={{\r\n                  height: `300px`,\r\n                  minWidth: \"400px\",\r\n                  borderRadius: \"8px\",\r\n                }}\r\n              />\r\n            }\r\n            mapElement={\r\n              <div\r\n                style={{ height: `100%`, width: \"100%\", borderRadius: \"8px\" }}\r\n              />\r\n            }\r\n          />\r\n        </div>\r\n        <div className=\"map_buttons\">\r\n          <button\r\n            className=\"capture_button\"\r\n            onClick={() => this.captureMapOnClick()}\r\n          >\r\n            Capture\r\n          </button>\r\n\r\n          <button className=\"save_button\" onClick={() => this.saveImage()}>\r\n            Save Image\r\n          </button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nexport const NavBar = () => {\r\n  const onSignOutClick = () => {\r\n    window.location.reload();\r\n  };\r\n  return (\r\n    <nav>\r\n      <span className=\"logo\">snaptrude</span>\r\n      <button onClick={onSignOutClick}>Sign Out</button>\r\n    </nav>\r\n  );\r\n};\r\n","import React, { useEffect, useState, useRef } from \"react\";\nimport SceneWrapper from \"./component/sceneWrapper/SceneWrapper\";\nimport \"./App.css\";\nimport { getUser } from \"./action\";\nimport venueManager from \"./component/venueManager.png\";\nimport Map from \"./component/map/Map\";\nimport { LoginPage } from \"./component/loginPage/LoginPage\";\nimport { NavBar } from \"./component/navbar/NavBar\";\nimport { shadowMapFragment } from \"@babylonjs/core/Shaders/ShadersInclude/shadowMapFragment\";\n\nconst App = () => {\n  const [userName, setUserName] = useState();\n  const [loginScreen, setLoginScreen] = useState(true);\n  const [image, setImage] = useState();\n  const [loggedInUser, setLoggedInUser] = useState({});\n  const [imageUpdated, setImageUpdated] = useState(true);\n  const [captureMap, setCaptureMap] = useState(venueManager);\n  const [noOfBoxes, setNoOfBoxes] = useState(0);\n  const [text, setText] = useState(\"\");\n  const [suggestion, setSuggestion] = useState({\n    show: false,\n    top: 0,\n    left: 0,\n  });\n  const [rightDialogueValue, setRightDialogueValue] = useState(\"\");\n  const rightDialogueRef = useRef(null);\n\n  let arrayOfWord = [\n    \"searching\",\n    \"text\",\n    \"copy\",\n    \"paste\",\n    \"image\",\n    \"pixel\",\n    \"working\",\n  ];\n\n  const handleClickOutside = (e) => {\n    console.log(rightDialogueRef);\n    if (\n      rightDialogueRef.current !== null &&\n      !rightDialogueRef.current.contains(e.target)\n    ) {\n      setRightDialogueValue(\"\");\n      setText(\"\");\n    }\n  };\n\n  // const handleClickInside = () => setClickedOutside(false);\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  });\n  useEffect(() => {\n    console.log(\"suggestion\", suggestion);\n  }, [suggestion]);\n\n  useEffect(() => {\n    console.log(\"number of boxes\", noOfBoxes);\n  }, [noOfBoxes]);\n  useEffect(() => {\n    if (!loginScreen) {\n      let body = {\n        username: loggedInUser.username,\n        password: loggedInUser.password,\n      };\n      getUser(body).then((res) => {\n        console.log(\"user data\", res);\n        setUserName(res.data.result.username);\n        setImage(res.data.result.img);\n      });\n    }\n  }, [imageUpdated, loginScreen]);\n\n  const onClickRightDialogue = (e) => {\n    setRightDialogueValue(e);\n  };\n  let filtered = arrayOfWord.filter((a) => a.includes(text));\n  return (\n    <div className=\"app\">\n      {/* {loginScreen ? (\n        <LoginPage\n          setLoginScreen={setLoginScreen}\n          setLoggedInUser={setLoggedInUser}\n        />\n      ) : ( */}\n      <>\n        <NavBar />\n        <div className=\"base_wrapper\">\n          {/* <div className=\"map\">\n              <Map\n                loggedInUser={loggedInUser}\n                setCaptureMap={setCaptureMap}\n                captureMap={captureMap}\n                setImageUpdated={setImageUpdated}\n                imageUpdated={imageUpdated}\n              />\n              <div className=\"details_container\">\n                <span>\n                  User: <span>{userName}</span>{\" \"}\n                </span>\n                <span>\n                  {\" \"}\n                  Saved image:{\" \"}\n                  {\n                    <img\n                      src={image}\n                      alt=\"user_map_image\"\n                      style={{ width: \"100px\", height: \"100px\" }}\n                    />\n                  }\n                </span>\n\n                <span>No of boxes : {noOfBoxes}</span>\n                <button onClick={onSignOutClick}>Sign Out</button>\n              </div>\n            </div> */}\n          <div className=\"scene\">\n            <div className=\"right_controls\">\n              <span\n                style={{\n                  border:\n                    rightDialogueValue === \"map\"\n                      ? \"1px solid black\"\n                      : \"1px solid transparent\",\n                }}\n                onClick={() => onClickRightDialogue(\"map\")}\n              >\n                Map\n              </span>\n              <span\n                style={{\n                  border:\n                    rightDialogueValue === \"account\"\n                      ? \"1px solid black\"\n                      : \"1px solid transparent\",\n                }}\n                onClick={() => onClickRightDialogue(\"account\")}\n              >\n                Acc.\n              </span>\n            </div>\n\n            {rightDialogueValue === \"map\" && (\n              <>\n                <div className=\"map_dialogue_box\" ref={rightDialogueRef}>\n                  <div>\n                    <Map\n                      loggedInUser={loggedInUser}\n                      setCaptureMap={setCaptureMap}\n                      captureMap={captureMap}\n                      setImageUpdated={setImageUpdated}\n                      imageUpdated={imageUpdated}\n                    />\n                  </div>\n                </div>\n              </>\n            )}\n            {rightDialogueValue === \"account\" && (\n              <>\n                <div className=\"map_dialogue_box\" ref={rightDialogueRef}>\n                  <div className=\"details_container\">\n                    <span>\n                      User: <span>{userName}</span>{\" \"}\n                    </span>\n                    <span className=\"details_contianer_img\">\n                      {\" \"}\n                      Saved image:{\" \"}\n                      {\n                        <img\n                          src={image}\n                          alt=\"user_map_image\"\n                          style={{ width: \"100px\", height: \"100px\" }}\n                        />\n                      }\n                    </span>\n\n                    <span>No of boxes : {noOfBoxes}</span>\n                  </div>\n                </div>\n              </>\n            )}\n            <div className=\"scene_wrapper\">\n              {suggestion.show && filtered.length > 0 && (\n                <span\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    position: \"absolute\",\n                    top: suggestion.top,\n                    left: suggestion.left,\n                    background: \"#ffffff\",\n                    width: \"fit-content\",\n                    padding: \"10px\",\n                    height: 100,\n                    overflow: \"scroll\",\n                  }}\n                >\n                  {filtered.map((a) => (\n                    <span>{a}</span>\n                  ))}\n                </span>\n              )}\n              <SceneWrapper\n                captureMap={captureMap}\n                words={arrayOfWord}\n                setSuggestion={setSuggestion}\n                setCaptureMap={setCaptureMap}\n                setNoOfBoxes={setNoOfBoxes}\n                setText={setText}\n                noOfBoxes={noOfBoxes}\n                onClickRightDialogue={onClickRightDialogue}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n      {/* )} */}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}